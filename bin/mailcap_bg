#!/bin/bash
# $Id$
#
# Mutt mailcap helper -- this program copies the file to be viewed
# prior to starting the viewer in the background.  This allows mutt to
# delete the temporary file without disturbing the viewer.
#
# Syntax: mailcap_bg filename prog [args]
#         mailcap_test filename prog (determines if mailcap_bg can run)
#
# Copyright 2003, 2006 Aron Griffis <agriffis n01se.net>
# released under the GNU General Public License version 2
#
# Tweaked by Adam Spiers <mutt@adamspiers.org>
#
# Upstream version:
# http://agriffis.n01se.net/skel.hg/?file/tip/bin/mailcap_bg

PS4="${0##*/}+ "
exec 1>>~/.mailcap_bg.log 2>&1

cat <<EOF
----------------------
`date`
pid $$, invoked as $0 $@
EOF

set -x

# Test mode
testing=false
if [[ $1 == -test ]]; then
    testing=true
    shift
fi

# Setup global variables.
need_wait=no
fname="$1" ; shift
prog="$1"  ; shift

declare -a args=("${@}")

# Test only if called as mailcap_test
if $testing || [[ $0 == *_test ]]; then
    # Note regarding mailcap %s usage in test= section: This will only
    # resolve to a value when there is a filename specified in the
    # attachment, for example
    #
    #    Content-Type: application/x-msdownload; name="pack276.exe"
    #
    # Otherwise it will be blank.  That is the reason for the
    # following rearrangement of variables.  There is some further
    # explanation and discussion in .mailcap
    if [[ -z "$prog" ]]; then
        prog=$fname
        fname=
    fi

    # make sure the requested program exists
    type -P "$prog" &>/dev/null || exit 1

    # and we have a display
    [[ -n "$DISPLAY" ]] || exit 1

    # no other restrictions of which we're aware at this point
    exit 0
fi

if [[ -z "$prog" ]]; then
    echo "mailcap_bg: No program argument provided; aborting." >&2
    alertme "mailcap_bg: No program argument provided; aborting."
    exit 1
fi

# Copy the file so that mutt can do whatever it wants to the original.
# Using a temp dir instead of a temp file preserves the original
# extension.  Note that fname should always be an absolute path.
#
# If mutt is providing a temporary file, it will zero out the file
# from the disk prior to deleting it.  Therefore we can't use a hard
# link as it would be zero'd before the viewer gets a chance to access
# it.  We can't mv either, since if mutt is providing a file attached
# to a draft mail, it's not a temporary file.  Therefore copy is the
# only safe solution which will work in every scenario.

#template="${fname%/*}/mailcap_bg.XXXXXX"
# Since we're not hard linking, these can go in /tmp now
template="/tmp/mailcap_bg.XXXXXX"
tname=$(mktemp -d "$template") \
    && cp "${fname}" "${tname}/${fname##*/}" \
    && tname="${tname}/${fname##*/}"
if [[ $? != 0 ]]; then
    # Can't background, unfortunately
    need_wait=yes
    tname=${fname}
fi

# Run the viewer in the background
(
    # replace @s if it exists in the viewer string
    if [[ "${args[*]}" == *@s* ]]; then
        args=("${args[@]//@s/$tname}")
        # Alternative method follows; do them one at a time
        #for ((i = 0; i < ${#args[@]}; i = i+1)); do
        #    args[i] = "${args[i]//%s/$tname}"
        #done
    else 
        args=("${args[@]}" "${tname}")
    fi

    # run the program
    "$prog" "${args[@]}"
    echo "$prog $* exited with status code $?"

    # Delete the temp file when it's no longer in use.
    # This is important for mozilla, for example, which can return
    # immediately once it has signalled a running instance.
    if [[ $tname != $fname ]]; then
        while true; do
            # An hour is pretty arbitrary and arguably too low and high.
            # Let's see how we get on with checking every minute.
            sleep $((1*60))
            [[ -f $tname ]] || break                # no longer exists
            fuser "$tname" &>/dev/null && continue  # still in use
            rm -f "$tname"
            rmdir "${tname%/*}"  # tname is a file in a temporary directory
            break
        done &
    fi
) &

# Only wait if we have to (couldn't hard link)... this could lead to
# problems because of the 30-second pause
[[ $need_wait == yes ]] && wait

# If we exit non-zero, mutt will do its wait_key prompt which is annoying.
exit 0
