#!/usr/bin/perl
#
# extract headers from mail stream on STDIN.
# For use with mutt, .e.g
#
#    macro index "\em"  ":set pipe_decode=no\n<pipe-message>mairix-copy-message ids\n:set pipe_decode\n"

use strict;
use warnings;

use Getopt::Long;
use Mail::Header;
use Mail::Address;

use Mairix;

my %opts;
GetOptions(
  \%opts,
  'help',
  'ids', 'threads', 'no-wait',
) or usage();
usage() if @ARGV or $opts{help};

sub usage {
  warn @_, "\n" if @_;

  (my $me = $0) =~ s,.*/,,;

  die <<EOUSAGE;
Usage: cat mail1 [mail2 ...] | $me [--ids | --threads] [--no-wait]
Options:
  -h, --help     Show this help
      --ids      Extract Message-ID header(s)
      --threads  Extract thread subject(s)
      --no-wait  Exit zero so that mutt doesn't wait_key
EOUSAGE
}

die "\$MAIL_PROFILE not set" unless length $ENV{MAIL_PROFILE};
my $protocol = $ENV{MAIL_PROFILE} eq 'personal' ? 'mairixp' : 'mairix';

my $header = parse_header();
my %h = extract_fields($header, qw(message-id subject from));
my $query_type = $opts{ids}     ? 'message-id-query'
               : $opts{threads} ? 'subject-query'
               : usage();
my $query    = $h{$query_type};
my $URL      = "$protocol://$query";
my $org_link = "$protocol:$query";

write_file("$ENV{HOME}/.clip-mairix", "<$URL>");

print "\n";

my $subject = $h{subject};
$subject =~ tr/[]/<>/;
my $link_text = $query_type eq 'subject-query'
              ? "s:$subject"
              : "f:$h{fromname} s:$subject";
write_file(
  "$ENV{HOME}/.org-mairix-link",
  "[[$org_link][$link_text]]",
);

print "\n";

s/"/\\"/g foreach values %h;
write_file("$ENV{HOME}/.org-mairix-store-link.el", <<EOF);
(org-store-mairix-link-props
  :from "$h{from}"
  :subject "$h{subject}"
  :subjectquery "$h{'subject-query'}"
  :message-id "$h{'message-id'}"
  :message-id-query "$h{'message-id-query'}")
EOF

if ($opts{'no-wait'}) {
  sleep 1;
  exit 0; # so that mutt wait_key doesn't ask for a key-press
}
else {
  # This doesn't work as we've already redirected STDIN.
  #print "Press enter to continue ... ";
  #my $read_key = <STDIN>;
  # So we use mutt wait_key instead:
  exit 1;
}

######################################################################

sub parse_header {
  my $header = new Mail::Header \*STDIN;
  return $header;
}

sub extract_fields {
  my ($header, @fields) = @_;

  my %h;
  for (@fields) {
    $h{$_} = $header->get($_) || '';
    chomp $h{$_};
    $h{$_} =~ s/\s{2,}/ /g;
  }

  $h{subject} = Mairix::normalize_subject($h{subject});

  my $from = $header->get('From') || '';
  $from =~ s/\s{2,}/ /g;
  # FIXME: `org-store-link-props' will automatically extract
  # 'fromname' and 'fromaddress' properties from the 'from' property,
  # and similarly for 'toname' and 'toaddress', therefore we can
  # probably ditch these and hence the dependency on Mail::Address.
  my @from_addrs = Mail::Address->parse($from);
  if (@from_addrs) {
    if (@from_addrs > 1) {
      die "more than one From address in header";
    }
    $h{fromaddr} = $from_addrs[0]->address;
    $h{fromname} = $from_addrs[0]->name || $h{fromaddr};
    $h{fromname} =~ s/([A-Z])[a-z]+ /$1 /g;
  }
  else {
    warn "no From address in header";
    $h{fromname} = 'unknown sender (no From header)';
  }

  $h{'message-id-query'} = Mairix::message_id_query($h{'message-id'});
  $h{'subject-query'} = Mairix::subject_query($h{subject});

  return %h;
}

sub build_query {
  my (%h) = @_;
  my $field = $opts{ids}     ? 'message-id'
            : $opts{threads} ? 'subject'
            : usage();
  my $value = $h{$field};
  unless (defined $value) {
    warn "No $field header found!  Press a key ...\n";
    my $read_key = <STDIN>;
    exit 1;
  }
  return Mairix::field_query($field, $value);
}

sub write_file {
  my ($dst, @lines) = @_;
  open(OUT, ">$dst") or die "Couldn't open(>$dst): $!\n";
  print "-- Writing to $dst:\n";
  my $out = join "\n", @lines;
  print OUT "$out";
  print     "$out\n";
  close(OUT);
}
